# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven
# whenver there is a push to a branch that is not master
# there needs to be a way to build & test the code - no problem -> build job takes care of this
# after we are succesful execute the next job
# the next job needs to merge the changes into master... but how do we merge into master?
# typically the manual way would be to compare changes between master and X branch via a pull request

on:
  push:
    branches: [ master, trial ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
#    - name: Set up selenium firefox
#      container:
#        image: selenium/standalone-firefox:latest
#    - name: Install google chrome
#      run: |
#        whatis flatpak
#        chmod +x ./scripts/InstallChrome.sh
#         ./scripts/InstallChrome.sh
    - name: Build with Maven
      run: mvn -B package --file pom.xml -X
# will need build job -> build job simultaneously take care of testing
# find a way to push to master
  integration:
    # checkout what was commited, then create the pr
    # accept the pr and merge to master
    # THOUGHT PROCESS:
    # get branch name
    # checkout into branch using branch name
    # checking the branch name just incase
    # initialize pr
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]${GITHUB_REF#refs/heads/}"
      id: extract_branch
    # - uses: actions/checkout@v2
    #   with:
    #     ref: ${{ steps.extract_branch.outputs.branch }}
    #     fetch-depth: 0
    # # - run: echo "bs" > bs.txt
    # - name: check output for extract branch name
    #   run: echo ${{ steps.extract_branch.outputs.branch }}
    - name: initialize pr
      uses: gha-utilities/init-pull-request@v0.1.9
      with:
        verbose: true
        pull_request_token: ${{ secrets.GITHUB_TOKEN }}
        head: ${{ steps.extract_branch.outputs.branch }}
        base: master
        title: "Take me away"
        body: >
          Perhaps a multi-line descritpion
          about latest features and such


    # - name: create pr, accept and merge to master
    #   id: cpr
    #   uses: peter-evans/create-pull-request@v3
    #   with:
    #     # token: ${{ secrets.GITHUB_TOKEN }}
    #     branch: ${{ steps.extract_branch.outputs.branch }}
    #     labels: automerge
    # - name: check outputs
    #   run: |
    #     echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
    #     echo "PR URL - ${{ steps.cpr.outputs.pull-request-url }}"
    #     echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
    # - name: branch name
    #   run: |
    #     echo "running on branch - ${{ github.ref }}"
    #     echo "running on branch - ${GITHUB_REF##*/}"
    #     echo "different thing: - ${{ github.base_ref }}"
    #     echo "different thing: - ${{ github.head_ref }}"
    #     echo "actor: - ${{ github.actor }}"
    # - uses: pascalgn/automerge-action@v0.12.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # if we were to make any changes it would be here
    # https://github.com/marketplace/actions/create-pull-request
    # following works on prs with the auto merge label
    # https://github.com/marketplace/actions/merge-pull-requests  
  #     run: pwd
      # with:
        # github_token: ${{ secrets.GITHUB_TOKEN }}
        # branch: ${{ github.ref }}